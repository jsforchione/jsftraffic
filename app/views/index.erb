<head>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js">
  </script>
  <script type="text/javascript"
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDci-SFGlohnd_fK_pjnkXCSeMaCPPS228&libraries=geometry">
  </script>
</head>
<body>
  <h1>Please enter your origin and destination</h1>
  <input id="origin_street" placeholder="address"></input>
  <input id="origin_city" placeholder="city"></input>
  <input id="origin_state" placeholder="state"></input>

  <input id="destination_street" placeholder="address"></input>
  <input id="destination_city" placeholder="city"></input>
  <input id="destination_state" placeholder="state"></input>
  <button type="button" onclick="get_traffic()">Get traffic time!</button>
</body>
<script>


function get_traffic(){
  var origin_street = $('#origin_street').val();
  var origin_city = $('#origin_city').val();
  var origin_state = $('#origin_state').val();
  var origin_LatLng = '';
  var destination_street = $('#destination_street').val();
  var destination_city = $('#destination_city').val();
  var destination_state = $('#destination_state').val();
  var destination_Lat = '';
  var destination_Lng = '';
  var origin_Lat = '';
  var origin_Lng = '';

  origin_city = origin_city.replace(/ /g,'+');
  origin_state = origin_state.replace(/ /g,'+');
  destination_city = destination_city.replace(/ /g, '+');
  destination_state = destination_state.replace(/ /g, '+');

  var origin = origin_street + ' ' +origin_city + ',' + origin_state; 
  var destination = destination_street + ' ' + destination_city + ',' + destination_state;

  var geocoder = new google.maps.Geocoder();


  geocoder.geocode({'address': origin_street + ' ' + origin_city + ',' + origin_state}, function(results, status) {
    if (status === 'OK') {
      console.log("HELO");
      origin = results[0];

      origin_Lat = results[0].geometry.viewport.f.b;
      origin_Lng = results[0].geometry.viewport.b.b;
      ///console.log(origin);
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  })

   geocoder.geocode({'address': destination_street + ' ' + destination_city + ',' + destination_state}, function(results, status) {
    if (status === 'OK') {

      destination_Lat = results[0].geometry.viewport.f.b;
      destination_Lng = results[0].geometry.viewport.b.b;
      ///console.log(origin);
    } else {
      alert('Geocode was not successful for the following reason: ' + status);
    }
  })


var url = 'https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=Washington,DC&destinations=New+York+City,NY&key=AIzaSyDci-SFGlohnd_fK_pjnkXCSeMaCPPS228';



 var origin1 = new google.maps.LatLng(origin_Lat, origin_Lng);
 var origin2 = origin;
 var destinationA = destination;
 var destinationB = new google.maps.LatLng(destination_Lat, destination_Lng);

// PSEUDOOOO
// 1. geocode origin and destination to get latlong pairs for distance matrix 
// 2. modify button, so that when button is clicked, rerender page to display text that shows the distance and time between places
// 3. also have a new button come up that will ask user if they want to save this origin destination pair with travel time
// 4. create a table called trips: column for origin, destination, distance, travel time, and time of day, timestamps
// 5. create a users table: name, timestamps 
// 6. one to many relationship between users and trips (one user can have many trips)
// 7. another page that has trip calculator, you can enter origin and destination and a desired departure time. calculator will find trips that match certain criteria with matching origin and destination. it will order them by departure time and then give user fastest departure time. will order them from least to most.



var service = new google.maps.DistanceMatrixService();
service.getDistanceMatrix(
  {
    origins: [origin1, origin],
    destinations: [destination, destinationB],
    travelMode: 'DRIVING',
    // transitOptions: TransitOptions,
    // drivingOptions: DrivingOptions,
    // unitSystem: UnitSystem,
    // avoidHighways: Boolean,
    // avoidTolls: Boolean,
  }, callback);

  function callback(response, status) {
    // See Parsing the Results for
    // the basics of a callback function.
    console.log(response.rows[1].elements[0].duration.text);
    console.log(response.rows[1].elements[0].duration.value);
    var distanceValue = response.rows[1].elements[0].duration.value;
  };
}

</script>